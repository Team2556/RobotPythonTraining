# RobotBuilder Version: 6.1
#
# This file was generated by RobotBuilder. It contains sections of
# code that are automatically generated and assigned by robotbuilder.
# These sections will be updated in the future when you export to
# Python from RobotBuilder. Do not put any code or make any change in
# the blocks indicating autogenerated code or it will be lost on an
# update. Deleting the comments indicating the section will prevent
# it from being updated in the future.

# ROBOTBUILDER TYPE: RobotContainer.

import wpilib
from wpilib import SmartDashboard, SendableChooser, PS4Controller
from wpilib2.command import Command, InstantCommand, SubsystemBase
from wpilib2.command.button import JoystickButton
from frc.robot.subsystems import Power, Drive, Nav
from frc.robot.commands import AutonomousCommand, drive_forward

class RobotContainer:
    # Singleton instance
    _instance = None

    @staticmethod
    def getInstance():
        if RobotContainer._instance is None:
            RobotContainer._instance = RobotContainer()
        return RobotContainer._instance

    def __init__(self):
        if RobotContainer._instance is not None:
            raise Exception("This class is a singleton!")
        else:
            RobotContainer._instance = self

        # The robot's subsystems
        self.m_power = Power()
        self.m_drive = Drive()
        self.m_nav = Nav()

        # Joysticks
        self.pS4Controller1 = PS4Controller(0)

        # A chooser for autonomous commands
        self.m_chooser = SendableChooser()

        # Smartdashboard Subsystems
        SmartDashboard.putData(self.m_nav)

        # SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", AutonomousCommand())
        SmartDashboard.putData("drive_forward: short", drive_forward(1, self.m_drive))

        # Configure the button bindings
        self.configureButtonBindings()

        # Configure default commands

        # Configure autonomous sendable chooser
        self.m_chooser.addOption("Autonomous Command", AutonomousCommand())
        self.m_chooser.addOption("drive_forward: short", drive_forward(1, self.m_drive))
        self.m_chooser.setDefaultOption("Autonomous Command", AutonomousCommand())

        SmartDashboard.putData("Auto Mode", self.m_chooser)

    def configureButtonBindings(self):
        # Create some buttons
        pS4Button1 = JoystickButton(self.pS4Controller1, PS4Controller.Button.kSquare.value)
        pS4Button1.onTrue(drive_forward(0, self.m_drive).withTimeout(0.0).withInterruptBehavior(Command.InterruptionBehavior.kCancelSelf))
        SmartDashboard.putData("PS4 Button 1", drive_forward(0, self.m_drive).withTimeout(0.0))

    def getPS4Controller1(self):
        return self.pS4Controller1

    def getAutonomousCommand(self):
        # The selected command will be run in autonomous
        return self.m_chooser.getSelected()